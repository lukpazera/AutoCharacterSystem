<?xml version="1.0"?>
<configuration>

    <atom type="Messages">

         <hash type="Table" key="rs.generic.en_US">
             <hash type="T" key="none">(none)</hash>
             <hash type="T" key="unknown">Unknown</hash>                     
         </hash>

         <hash type="Table" key="rs.disable.en_US">
             <hash type="T" key="noRigs">There are no rigs in scene.</hash>

             <hash type="T" key="newBind">Select an assigned unbound mesh to set up new bind.</hash>
             <hash type="T" key="newBindFromMap">Select an assigned unbound mesh to set up bind by mapping existing weight maps.</hash>
             <hash type="T" key="transferBind">Select a bound mesh to transfer bind from and an unboud mesh to transform setup to.</hash>
             <hash type="T" key="copyBind">Select a bound mesh to copy bind from and an unboud mesh to copy setup to.</hash>
             <hash type="T" key="selEffectors">Select a bound mesh select all joints that deform it.</hash>
             <hash type="T" key="assignBind">Select one or more meshes that are not part of any rig to assign them as bind meshes to %1 rig.</hash>
             <hash type="T" key="unassignBind">Select one or more bind meshes belonging to current edit rig to unassign them.</hash>                           
             <hash type="T" key="unbind">Select one or more bound meshes to unbind them.</hash>
             <hash type="T" key="delGuide">The Guide was already deleted from this rig.</hash>
             <hash type="T" key="cxtGuide">Guide was deleted from this rig, Guide Context is not available anymore.</hash>
             <hash type="T" key="selWMapDir">Select at least one bind skeleton joint to select weight container or weight map corresponding to it.</hash>
             <hash type="T" key="transWeightsMesh">Select source mesh first followed by one or more target meshes.</hash>
             <hash type="T" key="transWeightsMap">Select at least one weight map to transfer between meshes.</hash>
             <hash type="T" key="mirrorModule">Only right or left side modules can be mirrored!</hash>
             <hash type="T" key="mirrorAllModule">All right/left side modules in this rig are mirrored or there are no right/left side modules in the rig.</hash>
             <hash type="T" key="bakeUnsavedScene">The scene has to be saved before it can be baked!</hash>
             <hash type="T" key="gameexInvalidPath">Please, set valid export path first!</hash>
             <hash type="T" key="retargetSelectRoot">Select the root item of the hierarchy that you want to retarget motion from.</hash>
             <hash type="T" key="retargetInitFirst">Retargeting has to be initialized first!</hash>
             <hash type="T" key="retargetBake">Retargeting has to be initialized before retargeted motion can be baked into keyframes.</hash>
             <hash type="T" key="retargetReduce">Bake retargeted motion to keyframes in order to reduce keyframes on baked motion curves.</hash>
             <hash type="T" key="mirrorOneWay">Select at least one right or left side controller first.</hash>
             <hash type="T" key="dynaSpaceEnable">Select a controller that supports space switching first.</hash>
             <hash type="T" key="dynaParentSet">Select a controller with space switching enabled first.</hash>
             <hash type="T" key="dynaParentAdd">Select a controller with space switching enabled and an item to add as dynamic parent.</hash>
             <hash type="T" key="dynaParentDel">Select a controller with space switching initialized first.</hash>
             <hash type="T" key="dynaParentDelDefault">Default dynamic parent cannot be deleted!</hash>
             <hash type="T" key="dynaParentLink">Select a controller with space switching initialized first.</hash>
             <hash type="T" key="chanSetSource">Select a channel set that is part of an ACS3 rig first.</hash>
             <hash type="T" key="mirrorWeights">Select a bind mesh to mirror weights for first.</hash>
             <hash type="T" key="guideLink">Select a root guide that you want to parent followed by a guide that you want to parent the root guide to.\nA root guide is a guide that is not directly parented to any other guide.</hash>
             <hash type="T" key="guideUnlink">Select a parented root guide that you want to unlink first.</hash>
             <hash type="T" key="guideAttach">Select a guide that you want to attach followed by a guide to attach to.</hash>
             <hash type="T" key="guideDetach">Select a guide that has guides attached to it to detach them.</hash>
         </hash>

         <hash type="Table" key="rs.cmdexe.en_US">
             <hash type="T" key="assignBindTitle">Assign Bind Mesh</hash>         	
             <hash type="T" key="assignBindFreeze1">%1 mesh needs to have its transforms frozen to assign it as a bind mesh. Continue?</hash>
             <hash type="T" key="assignBindFreezeN">Multiple meshes need to have their transforms frozen to assign them as bind meshes. Continue?</hash>

             <hash type="T" key="unassignBindTitle">Unassign Bind Mesh</hash>         	
             <hash type="T" key="unassignBindUnbind1">%1 mesh is still bound to the rig. Do you want to unbind it first?</hash>
             <hash type="T" key="unassignBindUnbindN">Multiple meshes are still bound to the rig. Do you want to unbind them first?</hash>

             <hash type="T" key="assignBeforeBindTitle">Auto Assign Bind Mesh</hash>
             <hash type="T" key="assignBeforeBind">%1 mesh is not an assigned bind mesh. Do you want to assign it now?</hash>
             <hash type="T" key="warnSkeletonBindTitle">Bind</hash>
             <hash type="T" key="warnSkeletonBind">Bind skeleton consists of multiple hierarchies. This usually means that not all modules were connected properly.\nAre you sure you want to continue with binding multiple hierarchies?</hash> 

             <hash type="T" key="bakeTitle">Bake Rig</hash>
             <hash type="T" key="bakeOverwrite">%1 scene already exists and will be overwritten. Continue?</hash>

             <hash type="T" key="stdNoFilename">Save the scene first!</hash>

             <hash type="T" key="attachTitle">Attach Mesh</hash>
         </hash>

         <hash type="Table" key="rs.cmdabort.en_US">
             <hash type="T" key="newMResExists">Mesh resolution with this name already exists!</hash>
             <hash type="T" key="renameMResExists">Mesh resolution with this name already exists!</hash>
             <hash type="T" key="delMResOne">There has to be at least one mesh resolution added to the rig!</hash>                      
         </hash>

         <hash type="Table" key="rs.cmdbutton.en_US">
             <hash type="T" key="itemNew">Add %1</hash> <!-- %1 will be replaced with item type username -->

             <hash type="T" key="modVariant">Apply Variant: %1</hash> <!-- %1 will be replaced with variant name -->

             <hash type="T" key="modMirror">Mirror</hash>
             <hash type="T" key="modMirrorAll">Auto Mirror All</hash>
             <hash type="T" key="modMirrorSym">Mirror With Symmetry</hash>
             <hash type="T" key="modMirrorAllSym">Auto Mirror All With Symmetry</hash>

             <hash type="T" key="gmexAllSingle">Entire Character (Single File)</hash>
             <hash type="T" key="gmexAllMulti">Entire Character (Separate Files)</hash>
             <hash type="T" key="gmexSkelMesh">Skeletal Mesh</hash> 
             <hash type="T" key="gmexCurAction">Current Action</hash>
             <hash type="T" key="gmexAllActions">All Actions</hash>                                         
         
             <hash type="T" key="ctrlAddParent">Add Parent</hash>

             <hash type="T" key="clayClearRig">Clear Setup</hash>
             <hash type="T" key="clayClearModule">Clear All Module Regions</hash>  

             <hash type="T" key="setWeights">Set Weights To</hash>
             <hash type="T" key="incWeights">Increase Weights By</hash>
             <hash type="T" key="decWeights">Decrease Weights By</hash>

             <hash type="T" key="nextRes">Next Resolution</hash>
             <hash type="T" key="prevRes">Previous Resolution</hash>

             <hash type="T" key="keyRig">Key Rig</hash>
             <hash type="T" key="keySel">Key Selected Controllers</hash>
             <hash type="T" key="keyChan">Key Selected Channels</hash>

             <hash type="T" key="unkeyRig">Unkey Rig</hash>
             <hash type="T" key="unkeySel">Unkey Selected Controllers</hash>
             <hash type="T" key="unkeyChan">Unkey Selected Channels</hash>

             <hash type="T" key="resetRig">Reset Rig Pose</hash>
             <hash type="T" key="resetSel">Reset Selected Controllers Pose</hash>
             <hash type="T" key="resetChan">Reset Selected Channels Pose</hash>

             <hash type="T" key="remRig">Remove Animation From Rig</hash>
             <hash type="T" key="remSel">Remove Animation From Selected Controllers</hash>
             <hash type="T" key="remChan">Remove Animation From Selected Channels</hash>

             <hash type="T" key="clearRig">Clear Animation From Rig</hash>
             <hash type="T" key="clearSel">Clear Animation From Selected Controllers</hash>
             <hash type="T" key="clearChan">Clear Animation From Selected Channels</hash>

             <hash type="T" key="ikfksyncFrame">Synchronize IK/FK At Current Frame</hash>
             <hash type="T" key="ikfksyncEnv">Synchronize IK/FK For Entire Action</hash>

             <hash type="T" key="clayModeTool">Set Tool Rig Clay Mode</hash>
             <hash type="T" key="clayModeGest">Set Gesture Rig Clay Mode</hash>

             <hash type="T" key="mirrorPush">Mirror Pose Push</hash>
             <hash type="T" key="mirrorPull">Mirror Pose Pull</hash>

             <hash type="T" key="filterKeyRig">Filter Rig Static Keys</hash>
             <hash type="T" key="filterKeySel">Filter Selected Controllers Static Keys</hash>
             <hash type="T" key="filterKeyChan">Filter Selected Channels Static Keys</hash>

             <hash type="T" key="filterEnvRig">Filter Rig Static Keys And Envelopes</hash>
             <hash type="T" key="filterEnvSel">Filter Selected Controllers Static Keys And Envelopes</hash>
             <hash type="T" key="filterEnvChan">Filter Selected Channels Static Keys And Envelopes</hash>

             <hash type="T" key="keyInfoRig">Rig Keyframe Statistics</hash>
             <hash type="T" key="keyInfoSel">Selected Controllers Keyframe Statistics</hash>
             <hash type="T" key="keyInfoChan">Selected Channels Keyframe Statistics</hash>
         </hash>

         <hash type="Table" key="rs.cmddialog.en_US">
             <hash type="T" key="keyinfoTitle">Keyframes Information</hash>
             <hash type="T" key="keyinfoMsg">There are %1 keyframes on %2 envelopes for %3 in current action.</hash>
             <hash type="T" key="keyinfoScopeRig">selected rig(s)</hash>
             <hash type="T" key="keyinfoScopeItem">selected controller(s)</hash>
             <hash type="T" key="keyinfoScopeChannel">selected channel(s)</hash>   

             <hash type="T" key="keyfilterTitle">Filter Static Keys</hash>
             <hash type="T" key="keyfilterMsg">%1 static keys were removed.</hash>
             <hash type="T" key="envfilterTitle">Filter Static Keys And Envelopes</hash>
             <hash type="T" key="envfilterMsg">%1 static envelopes and %2 static keys were removed.</hash>  

             <hash type="T" key="attachFreezeScale">%1 mesh has scale transform that needs to be frozen. Freeze scaling on this mesh and continue?</hash>           
         </hash>

         <hash type="Table" key="rs.cmdtooltip.en_US">
             <hash type="T" key="modMirror">Mirrors current edit module to the other side without setting up symmetry.\nMirrored module is independent and can be fit separately.\nUse this mirror for asymmetrical characters.\nNote that you can change mirrored module to symmetric one at any time using *Symmetric To Module* setting in module's root item properties panel.</hash>
             <hash type="T" key="modMirrorSym">Mirrors current edit module to the other side and sets up symmetry between source and mirrored modules.\nMirrored module cannot be fit separately, it will alawys be symmetrical to source module.\nUse this mirror for symmetrical characters.\nNote that you can disable symmetry for mirrored module at any time using *Symmetric To Module* setting in module's root item properties panel.</hash>
             <hash type="T" key="modAutoMirror">Automatically finds all right or left side modules that do not have their counterparts on the other side and mirrors them without setting up symmetry.\nMirrored modules are independent and can be fit separately.\nUse this mirror for asymmetrical characters.\nNote that you can change any mirrored module to symmetric one at any time using *Symmetric To Module* setting in module's root item properties panel.</hash>
              <hash type="T" key="modAutoMirrorSym">Automatically finds all right or left side modules that do not have their counterparts on the other side and mirrors them with symmetry.\nMirrored modules cannot be fit separately, they will remain symmetrical to their source counterparts.\nUse this mirror for symmetrical characters.\nNote that you can disable symmetry for a mirrored module at any time using *Symmetric To Module* setting in module's root item properties panel.</hash>                                  

            <hash type="T" key="nextRes">Switches to next resolution from the mesh resolutions list.\nUse this button to quickly cycle through mesh resolutions in forward direction.</hash>
            <hash type="T" key="prevRes">Switches to previous resolution from the mesh resolutions list.\nUse this button to quickly cycle through mesh resolutions in reverse direction.</hash>

             <hash type="T" key="keyRig">Sets a key for all controllers in a rig at a current time.</hash>
             <hash type="T" key="keySel">Sets a key for selected controllers at a current time.</hash>
             <hash type="T" key="keyChan">Sets a key for selected channels at a current time.</hash>

             <hash type="T" key="unkeyRig">Removes a key from all controllers in a rig at a current time.</hash>
             <hash type="T" key="unkeySel">Removes a key from selected controllers at a current time.</hash>
             <hash type="T" key="unkeyChan">Removes a key from selected channels at a current time.</hash>

             <hash type="T" key="resetRig">Resets pose for all controllers in a rig at a current time.\nAnimated channels will have a keyframe created.</hash>
             <hash type="T" key="resetSel">Resets pose for selected controllers at a current time.\nAnimated channels will have a keyframe created.</hash>
             <hash type="T" key="resetChan">Resets pose for selected channels at a current time.\nAnimated channels will have a keyframe created.</hash>

             <hash type="T" key="remRig">Removes animation from all controllers leaving a rig in a pose from current frame.</hash>
             <hash type="T" key="remSel">Removes animation from selected controllers leaving values from current frame.</hash>
             <hash type="T" key="remChan">Removes animation from selected channels leaving values from current frame.</hash>

             <hash type="T" key="clearRig">Clears animation from all controllers in a rig restoring an action to a clean state.</hash>
             <hash type="T" key="clearSel">Clears animation from selected controllers restoring their default pose.</hash>
             <hash type="T" key="clearChan">Clears animation from selected channels restoring their default values.</hash>

             <hash type="T" key="ikfksyncFrame">Synchronizes IK and FK chains for entire rig at a current frame. Use this button if IK/FK chains do not blend smoothly right before the current keyframe.</hash>
             <hash type="T" key="ikfksyncEnv">Synchronizes IK and FK chains for entire rig in entire action. Use this button to fix any popping resulting from switch between non-matching IK/FK chains.</hash>

             <hash type="T" key="clayModeTool">Sets rig clay setup interaction mode to be tool based.\nClick a region to select a controller and enable the tool relevant for manipulating that controller.</hash>
             <hash type="T" key="clayModeGest">Sets rig clay setup interaction mode to be primarily gesture based.\nRegions that support gestures can be dragged on directly to manipulate the rig.\nRemaining regions will operate in tool mode.\nNote that gesture mode works correctly only in MODO 15.2 or newer.</hash>

             <hash type="T" key="mirrorPush">Pushes the pose of selected right or left sided controllers to equivalent controllers on the other side of the rig.\nCenter controllers are ignored.</hash>
             <hash type="T" key="mirrorPull">Pulls the pose for selected right or left sided controllers from equivalent controllers on the other side of the rig.\nCenter controllers are not affected.</hash>

             <hash type="T" key="filterKeyRig">Filters static keys for the entire rig in current action.\nStatic key is a key that is surrounded by two other keys that have the same value as static key and the curve is flat between all 3 keys.</hash>
             <hash type="T" key="filterKeySel">Filters static keys for selected controllers in current action.\nStatic key is a key that is surrounded by two other keys that have the same value as static key and the curve is flat between all 3 keys.</hash>
             <hash type="T" key="filterKeyChan">Filters static keys for the selected channels in current action.\nStatic key is a key that is surrounded by two other keys that have the same value as static key and the curve is flat between all 3 keys.</hash>

             <hash type="T" key="filterEnvRig">Filters static keys and envelopes for the entire rig in current action.\nStatic key is a key that is surrounded by two other keys that have the same value as static key and the curve is flat between all 3 keys.\nIf an animation envelope appears to have no motion after filtering static keys out the envelope is filtered out as well.\nUse this command to remove redundant envelopes that have keyframes but don't define any actual motion.</hash>
             <hash type="T" key="filterEnvSel">Filters static keys and envelopes for selected controllers in current action.\nStatic key is a key that is surrounded by two other keys that have the same value as static key and the curve is flat between all 3 keys.\nIf an animation envelope appears to have no motion after filtering static keys out the envelope is filtered out as well.\nUse this command to remove redundant envelopes that have keyframes but don't define any actual motion.</hash>
             <hash type="T" key="filterEnvChan">Filters static keys and envelopes for selected channels in current action.\nStatic key is a key that is surrounded by two other keys that have the same value as static key and the curve is flat between all 3 keys.\nIf an animation envelope appears to have no motion after filtering static keys out the envelope is filtered out as well.\nUse this command to remove redundant envelopes that have keyframes but don't define any actual motion.</hash>

             <hash type="T" key="keyInfoRig">Calculates and displays a number of keyframes and envelopes for the entire rig in current action.</hash>
             <hash type="T" key="keyInfoSel">Calculates and displays a number of keyframes and envelopes for selected controllers in current action.</hash>
             <hash type="T" key="keyInfoChan">Calculates and displays a number of keyframes and envelopes for selected channels in current action.</hash>
         </hash>
             <!-- MODULE FEATURES -->
         <hash type="Table" key="rs.modlabel.en_US">
             <hash type="T" key="rootMotion">Root Motion</hash>
             <hash type="T" key="enableDfrm">Enable Deformation</hash>
             <hash type="T" key="enableSpaceSwitch">Enable Space Switching</hash>
             <hash type="T" key="enableTranslation">Enable Translation</hash>
             <hash type="T" key="enableRotation">Enable Rotation</hash>

             <hash type="T" key="stdjntBoxShape">Set Controller Box Shape</hash>
             <hash type="T" key="stdjntLinkShape">Set Controller Joint Shape</hash>

             <hash type="T" key="jcSegments">Segments</hash>
             <hash type="T" key="jcFlipGuideDir">Flip Guide Direction</hash>

             <hash type="T" key="enableStretch">Enable Stretching</hash>
             <hash type="T" key="enableSecCtrl">Enable Secondary Controller</hash>
             <hash type="T" key="rotOrderX">X Dominant Rotation Order</hash>
             <hash type="T" key="rotOrderY">Y Dominant Rotation Order</hash>
             <hash type="T" key="enableUp">Enable Up Vector Controller</hash>
             <hash type="T" key="enableBank">Enable Banking Controller</hash>

             <hash type="T" key="thighJoints">Thigh Joints</hash>
             <hash type="T" key="shinJoints">Shin Joints</hash>            
             <hash type="T" key="holdHip">Hip Holder Joint</hash>
             <hash type="T" key="holdKnee">Knee Holder Joint</hash>
             <hash type="T" key="holdAnkle">Ankle Holder Joint</hash>

             <hash type="T" key="qUpJoints">Upper Joints</hash>
             <hash type="T" key="qLowJoints">Lower Joints</hash>            

             <hash type="T" key="armJoints">Arm Joints</hash>
             <hash type="T" key="farmJoints">Forearm Joints</hash>            
             <hash type="T" key="fingers">Fingers</hash>
             <hash type="T" key="thumb">Thumb</hash>
             <hash type="T" key="holdArm">Arm Holder Joint</hash>
             <hash type="T" key="holdElbow">Elbow Holder Joint</hash>
             <hash type="T" key="holdWrist">Wrist Holder Joint</hash>

             <hash type="T" key="vertebrae">Vertebrae</hash>
             <hash type="T" key="spineStretch">Enable Hips and Chest Stretching</hash>    
             <hash type="T" key="spineTweakPos">Enable Tweak Translation</hash> 
             <hash type="T" key="spineTweakRot">Enable Tweak Rotation</hash> 
             <hash type="T" key="spineTweakScl">Enable Tweak Stretching</hash> 

             <hash type="T" key="frontAxle">Front Axle</hash>
             <hash type="T" key="rearAxles">Rear Axles</hash>
             <hash type="T" key="selPathMesh">Select Path Mesh</hash>
             <hash type="T" key="setPathFromMesh">Set Path From Selected Mesh</hash>

             <hash type="T" key="eyelids">Eyelids</hash>

             <hash type="T" key="eSetupCMorphs">Add Corrective Morphs Setup</hash>
             <hash type="T" key="eInitCMorphs">Init Corrective Morphs For Selected Meshes</hash>
             <hash type="T" key="eEnableCMorphs">Enable Corrective Morphs</hash>
             <hash type="T" key="eEditUpCMorph">Edit Upper Eyelid Morph</hash>
             <hash type="T" key="eEditLowCMorph">Edit Lower Eyelid Morph</hash>
             <hash type="T" key="eEditCMorphExit">Exit Corrective Morph Editing</hash>
             <hash type="T" key="eCMorphMirror">Mirror Corrective Morphs</hash>

             <hash type="T" key="rearAxles">Rear Axles</hash>
             <hash type="T" key="selPathMesh">Select Path Mesh</hash>
             <hash type="T" key="setPathFromMesh">Set Path From Selected Mesh</hash>

             <hash type="T" key="musEnableHead">Enable Head Controller</hash>
             <hash type="T" key="musEnableTail">Enable Tail Controller</hash>
             <hash type="T" key="musEnableExtra">Enable Extra Controller</hash>
         </hash>

         <hash type="Table" key="rs.modtooltip.en_US">
             <hash type="T" key="baseRootMotion">Adds/removes root motion controller that can be used when exporting the rig with animation to a game engine. The motion of the root motion controller is 'substracted' from the the rest of the animation of the rig upon export to a game engine as the root motion is meant to be applied from code in the game engine.</hash>

             <hash type="T" key="enableDfrm">Adds deformation setup to the module. Toggle this property off if this module doesn't need to deform any meshes, it'll make the module a little bit simpler and possibly more performant.</hash>
             <hash type="T" key="enableSpaceSwitch">Enables space switching. Toggle this property on if you plan to change parenting of this module controller(s) during animation. Keep it off otherwise to optmize the setup.\nNote that once space switching is enabled the affected controller(s) gets switched to rig space by default which means it stops following its parent module.</hash>
             <hash type="T" key="stdjntEnableTranslation">Enables position channels on the main controller for animation. The controller can then be moved and its position can be keyframed.</hash>
             <hash type="T" key="stdjntEnableRotation">Enables rotation channels on the main controller for animation. The controller can then be rotated and the rotation can be keyframed.</hash>
             <hash type="T" key="stdjntBoxShape">Sets the main controller shape to wireframe box. The set shape doesn't depend on joint's length and can be adjusted further in controller's standard Shape Properties.\nBox shape is automatically set when you disable deformation setup on this module.</hash>
             <hash type="T" key="stdjntLinkShape">Sets the main controller shape to wireframe box link. The length of the shape is locked to joint's length, width and height as well as other settings can be adjusted further in controller's standard Link Properties.\nLink shape is automatically set when you enable deformation setup on this module.</hash>
             <hash type="T" key="jntChainEnableTranslation">Enables position channels on the first controller in the joint chain for animation. The controller can then be moved and its position can be keyframed.</hash>
             <hash type="T" key="jntChainEnableSpaceSwitch">Enables space switching for the first controller in the joint chain. Toggle this property on if you plan to change parenting of joint chain during animation. Keep it off otherwise to optmize the setup.\nNote that once space switching is enabled the joint chain gets switched to rig space by default which means it stops following its parent module.\nEnabling space switching enables translation on the first joint chain controller as well.</hash>
             <hash type="T" key="jntChainFlipGuideDir">Flips the joint chain guide in the horizontal plane. This command is an equivalent to rotating the first joint chain guide by 180 degrees on Y axis.</hash>
             <hash type="T" key="enableStretch">Enables an extra controller that can be used to scale or stretch the module during animation.</hash>
             <hash type="T" key="enableSecCtrl">Enables secondary rotation controller that can be used as a backup controller in cases in which the main controller hits the gimbal lock (one axis of rotation is lost due to two axes of rotation overlapping).</hash>
             <hash type="T" key="rotOrderX">Set X rotation order if you need the biggest range of motion around X axis (rotating vertically/up or down). Gimbal lock will happen on Y axis (rotating left or right).</hash>
             <hash type="T" key="rotOrderY">Set Y rotation order if you need the biggest range of motion around Y axis (rotating horizontally/left or right). Gimbal lock will happen on X axis (rotating vertically/up or down).</hash>
             <hash type="T" key="jntAimEnableSpaceSwitch">Enables space switching for the target controller. Toggle this property on if you plan to change parenting of the target controller during animation. Keep it off otherwise to optmize the setup.\nNote that once space switching is enabled the controller gets switched to rig space by default which means it stops following its parent module.</hash>
             <hash type="T" key="jntAimEnableUp">Enables an extra target style controller that can be used to manually manipulate the 'up' direction of the joint.</hash>
             <hash type="T" key="jntAimEnableBank">Enables an extra FK style controller that can be used to manually manipulate the 'up' direction of the joint. The FK controller works on top of the target style one.</hash>
             <hash type="T" key="jntAdvEnableTranslation">Enables position channels on controllers that allow for moving the joint and keyframing its translation.</hash>
             <hash type="T" key="jntAdvEnableUp">Enables an extra controller that can be used to manually manipulate the 'up' direction of the joint when targeting is on.</hash>
             <hash type="T" key="jntAdvEnableBank">Enables an extra FK style controller that can be used to bank the joint when targeting is on. The FK controller works on top of the extra up vector controller.</hash>
             <hash type="T" key="jntAdvEnableSpaceSwitch">Enables space switching for the controller in targeting mode. Toggle this property on if you plan to change parenting of the target controller during animation. Keep it off otherwise to optmize the setup.\nNote that once space switching is enabled the controller gets switched to rig space by default which means it stops following its parent module.</hash>
             <hash type="T" key="jntMusEnableHead">Enables an extra controller at the head of the joint. The controller can be moved to animate the location of the joint's head point.</hash>
             <hash type="T" key="jntMusEnableTail">Enables an extra controller at the tail of the joint. The controller can be moved to animate the location of the joint's tail point.</hash>
             <hash type="T" key="jntMusEnableExtra">Enables an extra controller that allows for controlling the bank angle and stretching the joint on X and Y axes manually.</hash>
             <hash type="T" key="spnEnableStretch">Enables extra controllers allowing for stretching hips and chest sections of the spine.</hash>
             <hash type="T" key="spnEnableTweakPos">Enables position channels on spine vertebrae tweak controllers for animation.</hash>
             <hash type="T" key="spnEnableTweakRot">Enables rotation channels on spine vertebrae tweak controllers for animation.</hash>
             <hash type="T" key="spnEnableTweakScl">Enables scale channels on spine vertebrae tweak controllers for animation.</hash>
             <hash type="T" key="spnVertebrae">Sets the number of vertebra joints in the spine (minimum of 3).</hash>
             <hash type="T" key="eyesEyelids">Adds or removes eyelids setup.</hash>

             <hash type="T" key="elidAddMorph">Adds or removes corrective morphs setup to the eyelids rig. Corrective morphs can be used to improve deformations when the eyes are closed.</hash>
             <hash type="T" key="elidInitMorph">Before you can use corrective morphs setup it has to be initialized for each mesh that needs deformation correction.\nTo initialize select the mesh (or meshes) that has eyelids geometry and is deformed by eyelid joints then hold down Ctrl and select right or left eyelids module root item in item list first.</hash>
             <hash type="T" key="elidEnableMorph">Enables or disables corrective morph influences for eyelids. Use this toggle to temporarily switch morph influences off (if you want to work on pure joint deformation for example).</hash>
             <hash type="T" key="elidEditUpMorph">Sets scene into the state in which upper eyelid corrective morph can be edited (by selecting the relevant mesh and morph influence).\nNote that to be able to edit the morph predictably you have to use MODO sculpting tools. Also, beware that not all of these tools work in the pose sculpting context.</hash>
             <hash type="T" key="elidEditLowMorph">Sets scene into the state in which lower eyelid corrective morph can be edited (by selecting the relevant mesh and morph influence).\nNote that to be able to edit the morph predictably you have to use MODO sculpting tools. Also, beware that not all of these tools work in the pose sculpting context.</hash>
             <hash type="T" key="elidExitEditMorph">Use this button to exit the corrective morph editing state.</hash>
             <hash type="T" key="elidMirrorMorph">Mirrors corrective morphs from one side of the rig to another.\nNote that this command automatically mirrors from the side that is editable in guide mode and overwrites the other side. Be sure to check which side is editable first (right side is the default) to avoid overwriting your work.</hash>

             <hash type="T" key="legThighJoints">Sets number of joints for the thigh section of the leg. All the extra joints beyond the main one are twist joints that are not used to animate the leg but to improve deformation when the leg is twisted. The more joints in the section you have the smoother/less distorted the twist deformation will be but also the more work will be required to skin the mesh (more joints equals more weight maps to paint).</hash>
             <hash type="T" key="legShinJoints">Sets number of joints for the shin section of the leg. All the extra joints beyond the main one are twist joints that are not used to animate the leg but to improve deformation when the leg is twisted. The more joints in the section you have the smoother/less distorted the twist deformation will be but also the more work will be required to skin the mesh (more joints equals more weight maps to paint).</hash>
             <hash type="T" key="legKneeHolder">Adds an extra holder joint to improve deformation in the knee area when the leg is bent. Knee holder joint orients itself between thigh and shin automatically, it does not require manual animation.\nYou can change the blending of knee holder joint between thigh and shin using the Knee Blending Factor (set to 0.5 by default).\nChanging Knee Joint Length Factor changes the size of the joint which has an importance when doing initial bind (MODO assigns weights to joints based on their length).</hash>
             <hash type="T" key="legAnkleHolder">Adds an extra holder joint to improve deformation when there's a lot of bending in the ankle area. Ankle holder joint orients itself between shin and foot automatically, it does not require manual animation.\nYou can change the blending of ankle holder joint between shin and foot using the Ankle Blending Factor (set to 0.5 by default).\nChanging Ankle Joint Length Factor changes the size of the joint which has an importance when doing initial bind (MODO assigns weights to joints based on their length).</hash>
             <hash type="T" key="legHipHolder">Adds an extra holder joint to improve deformation in the hip area. Hip holder joint orients itself between leg's parent module joint and the thigh automatically, it does not require manual animation.\nYou can change the blending of hip holder joint using the Hip Blending Factor (set to 0.5 by default).\nChanging Hip Joint Length Factor changes the size of the joint which has an importance when doing initial bind (MODO assigns weights to joints based on their length).</hash>

             <hash type="T" key="armArmJoints">Sets number of joints for the upper section of the arm. All the extra joints beyond the main one are twist joints that are not used to animate the arm but to improve deformation when the upper arm is twisted. The more joints in the section you have the smoother/less distorted the twist deformation will be but also the more work will be required to skin the mesh (more joints equals more weight maps to paint).</hash>
             <hash type="T" key="armForearmJoints">Sets number of joints for the forearm section of the arm. All the extra joints beyond the main one are twist joints that are not used to animate the arm but to improve deformation when the arm is twisted. The more joints in the section you have the smoother/less distorted the twist deformation will be but also the more work will be required to skin the mesh (more joints equals more weight maps to paint).</hash>
             <hash type="T" key="armElbowHolder">Adds an extra holder joint to improve deformation in the elbow area when the arm is bent. Elbow holder joint orients itself between upper arm and forearm automatically, it does not require manual animation.\nYou can change blending of the elbow holder joint using the Elbow Holder Blending (set to 0.5 by default).\nChanging Elbow Holder Length Factor changes the size of the joint which has an importance when doing initial bind (MODO assigns weights to joints based on their length).</hash>
             <hash type="T" key="armWristHolder">Adds an extra holder joint to improve deformation in the wrist area. Wrist holder joint orients itself between forearm and hand automatically, it does not require manual animation.\nYou can change blending of the wrist holder joint using the Wrist Holder Blending (set to 0.5 by default).\nChanging Wrist Holder Length Factor changes the size of the joint which has an importance when doing initial bind (MODO assigns weights to joints based on their length).</hash>
             <hash type="T" key="armArmHolder">Adds an extra holder joint to improve deformation in the upper arm/shoulder area. Arm holder joint orients itself between arm's parent module joint and the upper arm automatically, it does not require manual animation.\nYou can change blending of the arm holder joint using the Arm Holder Blending (set to 0.5 by default).\nChanging Arm Holder Length Factor changes the size of the joint which has an importance when doing initial bind (MODO assigns weights to joints based on their length).</hash>

             <hash type="T" key="armThumb">Adds or removes thumb finger from the hand.</hash>
             <hash type="T" key="armFingers">Sets the number of fingers in the hand (the count does not include the thumb). Fingers 1-4 are automatically named according to typical human hand fingers naming convention.</hash>  

             <hash type="T" key="qlegUpperJoints">Sets number of joints for the upper section of the leg. All the extra joints beyond the main one are twist joints that are not used to animate the leg but to improve deformation when the leg is twisted. The more joints in the section you have the smoother/less distorted the twist deformation will be but also the more work will be required to skin the mesh (more joints equals more weight maps to paint).</hash>
             <hash type="T" key="qlegLowerJoints">Sets number of joints for the lower section of the leg. All the extra joints beyond the main one are twist joints that are not used to animate the leg but to improve deformation when the leg is twisted. The more joints in the section you have the smoother/less distorted the twist deformation will be but also the more work will be required to skin the mesh (more joints equals more weight maps to paint).</hash>
             <hash type="T" key="qlegKneeHolder">Adds an extra holder joint to improve deformation in the knee area when the leg is bent. Knee holder joint orients itself between upper and lower leg automatically, it does not require manual animation.\nYou can change blending of the knee holder joint using the Knee Holder Blending (set to 0.5 by default).\nChanging Knee Holder Length Factor changes the size of the joint which has an importance when doing initial bind (MODO assigns weights to joints based on their length).</hash>
             <hash type="T" key="qlegAnkleHolder">Adds an extra holder joint to improve deformation in the ankle area. Ankle holder joint orients itself between lower leg and foot automatically, it does not require manual animation.\nYou can change blending of the ankle holder joint using the Ankle Holder Blending (set to 0.5 by default).\nChanging Ankle Holder Length Factor changes the size of the joint which has an importance when doing initial bind (MODO assigns weights to joints based on their length).</hash>
             <hash type="T" key="qlegHipHolder">Adds an extra holder joint to improve deformation in the hip area. Hip holder joint orients itself between leg's parent module joint and the upper leg automatically, it does not require manual animation.\nYou can change blending of the hip holder joint using the Hip Holder Blending (set to 0.5 by default).\nChanging Hip Holder Length Factor changes the size of the joint which has an importance when doing initial bind (MODO assigns weights to joints based on their length).</hash>

             <hash type="T" key="carFrontAxle">Adds/removes front axle setup.</hash>
             <hash type="T" key="carRearAxles">Sets the number of the rear axles in the car rig. Multiple rear axles allow for rigging truck type vehicles.</hash>
             <hash type="T" key="carSelPathMesh">Selects the mesh item that has the path for car motion inside. Use this command when you want to edit car path.</hash>
             <hash type="T" key="carSetPathFromMesh">Sets car motion path from selected mesh. Car rig uses a path in a mesh that is part of the car rig itself. Using this command you can quickly replace a path in rig's internal mesh with the one in a mesh that you selected. This is an easy way for setting new path for the car.\nTo use this command select the mesh you wish to copy the path from and then add the car rig root folder to selection by holding down Ctrl while clicking on the car rig root folder.</hash>

         </hash>
    </atom>
</configuration>